{"version":3,"file":"index.cjs.js","sources":["../src/util/to-buffer.ts","../node_modules/minimalistic-assert/index.js","../node_modules/inherits/inherits_browser.js","../node_modules/inherits/inherits.js","../node_modules/hash.js/lib/hash/utils.js","../node_modules/hash.js/lib/hash/common.js","../node_modules/hash.js/lib/hash/sha/common.js","../node_modules/hash.js/lib/hash/sha/1.js","../node_modules/hash.js/lib/hash/sha/256.js","../node_modules/hash.js/lib/hash/sha/224.js","../node_modules/hash.js/lib/hash/sha/512.js","../node_modules/hash.js/lib/hash/sha/384.js","../node_modules/hash.js/lib/hash/sha.js","../node_modules/hash.js/lib/hash/ripemd.js","../node_modules/hash.js/lib/hash/hmac.js","../node_modules/hash.js/lib/hash.js","../node_modules/@ethersproject/logger/lib.esm/_version.js","../node_modules/@ethersproject/logger/lib.esm/index.js","../node_modules/@ethersproject/bytes/lib.esm/_version.js","../node_modules/@ethersproject/bytes/lib.esm/index.js","../node_modules/@ethersproject/sha2/lib.esm/_version.js","../node_modules/@ethersproject/sha2/lib.esm/sha2.js","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../src/agent-manager.ts","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/ed25519-program.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","module.exports = assert;\n\nfunction assert(val, msg) {\n  if (!val)\n    throw new Error(msg || 'Assertion failed');\n}\n\nassert.equal = function assertEqual(l, r, msg) {\n  if (l != r)\n    throw new Error(msg || ('Assertion failed: ' + l + ' != ' + r));\n};\n","if (typeof Object.create === 'function') {\n  // implementation from standard node.js 'util' module\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    ctor.prototype = Object.create(superCtor.prototype, {\n      constructor: {\n        value: ctor,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n  };\n} else {\n  // old school shim for old browsers\n  module.exports = function inherits(ctor, superCtor) {\n    ctor.super_ = superCtor\n    var TempCtor = function () {}\n    TempCtor.prototype = superCtor.prototype\n    ctor.prototype = new TempCtor()\n    ctor.prototype.constructor = ctor\n  }\n}\n","try {\n  var util = require('util');\n  if (typeof util.inherits !== 'function') throw '';\n  module.exports = util.inherits;\n} catch (e) {\n  module.exports = require('./inherits_browser.js');\n}\n","'use strict';\n\nvar assert = require('minimalistic-assert');\nvar inherits = require('inherits');\n\nexports.inherits = inherits;\n\nfunction isSurrogatePair(msg, i) {\n  if ((msg.charCodeAt(i) & 0xFC00) !== 0xD800) {\n    return false;\n  }\n  if (i < 0 || i + 1 >= msg.length) {\n    return false;\n  }\n  return (msg.charCodeAt(i + 1) & 0xFC00) === 0xDC00;\n}\n\nfunction toArray(msg, enc) {\n  if (Array.isArray(msg))\n    return msg.slice();\n  if (!msg)\n    return [];\n  var res = [];\n  if (typeof msg === 'string') {\n    if (!enc) {\n      // Inspired by stringToUtf8ByteArray() in closure-library by Google\n      // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143\n      // Apache License 2.0\n      // https://github.com/google/closure-library/blob/master/LICENSE\n      var p = 0;\n      for (var i = 0; i < msg.length; i++) {\n        var c = msg.charCodeAt(i);\n        if (c < 128) {\n          res[p++] = c;\n        } else if (c < 2048) {\n          res[p++] = (c >> 6) | 192;\n          res[p++] = (c & 63) | 128;\n        } else if (isSurrogatePair(msg, i)) {\n          c = 0x10000 + ((c & 0x03FF) << 10) + (msg.charCodeAt(++i) & 0x03FF);\n          res[p++] = (c >> 18) | 240;\n          res[p++] = ((c >> 12) & 63) | 128;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        } else {\n          res[p++] = (c >> 12) | 224;\n          res[p++] = ((c >> 6) & 63) | 128;\n          res[p++] = (c & 63) | 128;\n        }\n      }\n    } else if (enc === 'hex') {\n      msg = msg.replace(/[^a-z0-9]+/ig, '');\n      if (msg.length % 2 !== 0)\n        msg = '0' + msg;\n      for (i = 0; i < msg.length; i += 2)\n        res.push(parseInt(msg[i] + msg[i + 1], 16));\n    }\n  } else {\n    for (i = 0; i < msg.length; i++)\n      res[i] = msg[i] | 0;\n  }\n  return res;\n}\nexports.toArray = toArray;\n\nfunction toHex(msg) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++)\n    res += zero2(msg[i].toString(16));\n  return res;\n}\nexports.toHex = toHex;\n\nfunction htonl(w) {\n  var res = (w >>> 24) |\n            ((w >>> 8) & 0xff00) |\n            ((w << 8) & 0xff0000) |\n            ((w & 0xff) << 24);\n  return res >>> 0;\n}\nexports.htonl = htonl;\n\nfunction toHex32(msg, endian) {\n  var res = '';\n  for (var i = 0; i < msg.length; i++) {\n    var w = msg[i];\n    if (endian === 'little')\n      w = htonl(w);\n    res += zero8(w.toString(16));\n  }\n  return res;\n}\nexports.toHex32 = toHex32;\n\nfunction zero2(word) {\n  if (word.length === 1)\n    return '0' + word;\n  else\n    return word;\n}\nexports.zero2 = zero2;\n\nfunction zero8(word) {\n  if (word.length === 7)\n    return '0' + word;\n  else if (word.length === 6)\n    return '00' + word;\n  else if (word.length === 5)\n    return '000' + word;\n  else if (word.length === 4)\n    return '0000' + word;\n  else if (word.length === 3)\n    return '00000' + word;\n  else if (word.length === 2)\n    return '000000' + word;\n  else if (word.length === 1)\n    return '0000000' + word;\n  else\n    return word;\n}\nexports.zero8 = zero8;\n\nfunction join32(msg, start, end, endian) {\n  var len = end - start;\n  assert(len % 4 === 0);\n  var res = new Array(len / 4);\n  for (var i = 0, k = start; i < res.length; i++, k += 4) {\n    var w;\n    if (endian === 'big')\n      w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];\n    else\n      w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];\n    res[i] = w >>> 0;\n  }\n  return res;\n}\nexports.join32 = join32;\n\nfunction split32(msg, endian) {\n  var res = new Array(msg.length * 4);\n  for (var i = 0, k = 0; i < msg.length; i++, k += 4) {\n    var m = msg[i];\n    if (endian === 'big') {\n      res[k] = m >>> 24;\n      res[k + 1] = (m >>> 16) & 0xff;\n      res[k + 2] = (m >>> 8) & 0xff;\n      res[k + 3] = m & 0xff;\n    } else {\n      res[k + 3] = m >>> 24;\n      res[k + 2] = (m >>> 16) & 0xff;\n      res[k + 1] = (m >>> 8) & 0xff;\n      res[k] = m & 0xff;\n    }\n  }\n  return res;\n}\nexports.split32 = split32;\n\nfunction rotr32(w, b) {\n  return (w >>> b) | (w << (32 - b));\n}\nexports.rotr32 = rotr32;\n\nfunction rotl32(w, b) {\n  return (w << b) | (w >>> (32 - b));\n}\nexports.rotl32 = rotl32;\n\nfunction sum32(a, b) {\n  return (a + b) >>> 0;\n}\nexports.sum32 = sum32;\n\nfunction sum32_3(a, b, c) {\n  return (a + b + c) >>> 0;\n}\nexports.sum32_3 = sum32_3;\n\nfunction sum32_4(a, b, c, d) {\n  return (a + b + c + d) >>> 0;\n}\nexports.sum32_4 = sum32_4;\n\nfunction sum32_5(a, b, c, d, e) {\n  return (a + b + c + d + e) >>> 0;\n}\nexports.sum32_5 = sum32_5;\n\nfunction sum64(buf, pos, ah, al) {\n  var bh = buf[pos];\n  var bl = buf[pos + 1];\n\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  buf[pos] = hi >>> 0;\n  buf[pos + 1] = lo;\n}\nexports.sum64 = sum64;\n\nfunction sum64_hi(ah, al, bh, bl) {\n  var lo = (al + bl) >>> 0;\n  var hi = (lo < al ? 1 : 0) + ah + bh;\n  return hi >>> 0;\n}\nexports.sum64_hi = sum64_hi;\n\nfunction sum64_lo(ah, al, bh, bl) {\n  var lo = al + bl;\n  return lo >>> 0;\n}\nexports.sum64_lo = sum64_lo;\n\nfunction sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + carry;\n  return hi >>> 0;\n}\nexports.sum64_4_hi = sum64_4_hi;\n\nfunction sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {\n  var lo = al + bl + cl + dl;\n  return lo >>> 0;\n}\nexports.sum64_4_lo = sum64_4_lo;\n\nfunction sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var carry = 0;\n  var lo = al;\n  lo = (lo + bl) >>> 0;\n  carry += lo < al ? 1 : 0;\n  lo = (lo + cl) >>> 0;\n  carry += lo < cl ? 1 : 0;\n  lo = (lo + dl) >>> 0;\n  carry += lo < dl ? 1 : 0;\n  lo = (lo + el) >>> 0;\n  carry += lo < el ? 1 : 0;\n\n  var hi = ah + bh + ch + dh + eh + carry;\n  return hi >>> 0;\n}\nexports.sum64_5_hi = sum64_5_hi;\n\nfunction sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {\n  var lo = al + bl + cl + dl + el;\n\n  return lo >>> 0;\n}\nexports.sum64_5_lo = sum64_5_lo;\n\nfunction rotr64_hi(ah, al, num) {\n  var r = (al << (32 - num)) | (ah >>> num);\n  return r >>> 0;\n}\nexports.rotr64_hi = rotr64_hi;\n\nfunction rotr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.rotr64_lo = rotr64_lo;\n\nfunction shr64_hi(ah, al, num) {\n  return ah >>> num;\n}\nexports.shr64_hi = shr64_hi;\n\nfunction shr64_lo(ah, al, num) {\n  var r = (ah << (32 - num)) | (al >>> num);\n  return r >>> 0;\n}\nexports.shr64_lo = shr64_lo;\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction BlockHash() {\n  this.pending = null;\n  this.pendingTotal = 0;\n  this.blockSize = this.constructor.blockSize;\n  this.outSize = this.constructor.outSize;\n  this.hmacStrength = this.constructor.hmacStrength;\n  this.padLength = this.constructor.padLength / 8;\n  this.endian = 'big';\n\n  this._delta8 = this.blockSize / 8;\n  this._delta32 = this.blockSize / 32;\n}\nexports.BlockHash = BlockHash;\n\nBlockHash.prototype.update = function update(msg, enc) {\n  // Convert message to array, pad it, and join into 32bit blocks\n  msg = utils.toArray(msg, enc);\n  if (!this.pending)\n    this.pending = msg;\n  else\n    this.pending = this.pending.concat(msg);\n  this.pendingTotal += msg.length;\n\n  // Enough data, try updating\n  if (this.pending.length >= this._delta8) {\n    msg = this.pending;\n\n    // Process pending data in blocks\n    var r = msg.length % this._delta8;\n    this.pending = msg.slice(msg.length - r, msg.length);\n    if (this.pending.length === 0)\n      this.pending = null;\n\n    msg = utils.join32(msg, 0, msg.length - r, this.endian);\n    for (var i = 0; i < msg.length; i += this._delta32)\n      this._update(msg, i, i + this._delta32);\n  }\n\n  return this;\n};\n\nBlockHash.prototype.digest = function digest(enc) {\n  this.update(this._pad());\n  assert(this.pending === null);\n\n  return this._digest(enc);\n};\n\nBlockHash.prototype._pad = function pad() {\n  var len = this.pendingTotal;\n  var bytes = this._delta8;\n  var k = bytes - ((len + this.padLength) % bytes);\n  var res = new Array(k + this.padLength);\n  res[0] = 0x80;\n  for (var i = 1; i < k; i++)\n    res[i] = 0;\n\n  // Append length\n  len <<= 3;\n  if (this.endian === 'big') {\n    for (var t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = len & 0xff;\n  } else {\n    res[i++] = len & 0xff;\n    res[i++] = (len >>> 8) & 0xff;\n    res[i++] = (len >>> 16) & 0xff;\n    res[i++] = (len >>> 24) & 0xff;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n    res[i++] = 0;\n\n    for (t = 8; t < this.padLength; t++)\n      res[i++] = 0;\n  }\n\n  return res;\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar rotr32 = utils.rotr32;\n\nfunction ft_1(s, x, y, z) {\n  if (s === 0)\n    return ch32(x, y, z);\n  if (s === 1 || s === 3)\n    return p32(x, y, z);\n  if (s === 2)\n    return maj32(x, y, z);\n}\nexports.ft_1 = ft_1;\n\nfunction ch32(x, y, z) {\n  return (x & y) ^ ((~x) & z);\n}\nexports.ch32 = ch32;\n\nfunction maj32(x, y, z) {\n  return (x & y) ^ (x & z) ^ (y & z);\n}\nexports.maj32 = maj32;\n\nfunction p32(x, y, z) {\n  return x ^ y ^ z;\n}\nexports.p32 = p32;\n\nfunction s0_256(x) {\n  return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);\n}\nexports.s0_256 = s0_256;\n\nfunction s1_256(x) {\n  return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);\n}\nexports.s1_256 = s1_256;\n\nfunction g0_256(x) {\n  return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);\n}\nexports.g0_256 = g0_256;\n\nfunction g1_256(x) {\n  return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);\n}\nexports.g1_256 = g1_256;\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_5 = utils.sum32_5;\nvar ft_1 = shaCommon.ft_1;\nvar BlockHash = common.BlockHash;\n\nvar sha1_K = [\n  0x5A827999, 0x6ED9EBA1,\n  0x8F1BBCDC, 0xCA62C1D6\n];\n\nfunction SHA1() {\n  if (!(this instanceof SHA1))\n    return new SHA1();\n\n  BlockHash.call(this);\n  this.h = [\n    0x67452301, 0xefcdab89, 0x98badcfe,\n    0x10325476, 0xc3d2e1f0 ];\n  this.W = new Array(80);\n}\n\nutils.inherits(SHA1, BlockHash);\nmodule.exports = SHA1;\n\nSHA1.blockSize = 512;\nSHA1.outSize = 160;\nSHA1.hmacStrength = 80;\nSHA1.padLength = 64;\n\nSHA1.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n\n  for(; i < W.length; i++)\n    W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n\n  for (i = 0; i < W.length; i++) {\n    var s = ~~(i / 20);\n    var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);\n    e = d;\n    d = c;\n    c = rotl32(b, 30);\n    b = a;\n    a = t;\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n};\n\nSHA1.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar shaCommon = require('./common');\nvar assert = require('minimalistic-assert');\n\nvar sum32 = utils.sum32;\nvar sum32_4 = utils.sum32_4;\nvar sum32_5 = utils.sum32_5;\nvar ch32 = shaCommon.ch32;\nvar maj32 = shaCommon.maj32;\nvar s0_256 = shaCommon.s0_256;\nvar s1_256 = shaCommon.s1_256;\nvar g0_256 = shaCommon.g0_256;\nvar g1_256 = shaCommon.g1_256;\n\nvar BlockHash = common.BlockHash;\n\nvar sha256_K = [\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,\n  0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,\n  0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,\n  0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,\n  0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,\n  0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,\n  0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,\n  0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,\n  0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n];\n\nfunction SHA256() {\n  if (!(this instanceof SHA256))\n    return new SHA256();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,\n    0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n  ];\n  this.k = sha256_K;\n  this.W = new Array(64);\n}\nutils.inherits(SHA256, BlockHash);\nmodule.exports = SHA256;\n\nSHA256.blockSize = 512;\nSHA256.outSize = 256;\nSHA256.hmacStrength = 192;\nSHA256.padLength = 64;\n\nSHA256.prototype._update = function _update(msg, start) {\n  var W = this.W;\n\n  for (var i = 0; i < 16; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i++)\n    W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);\n\n  var a = this.h[0];\n  var b = this.h[1];\n  var c = this.h[2];\n  var d = this.h[3];\n  var e = this.h[4];\n  var f = this.h[5];\n  var g = this.h[6];\n  var h = this.h[7];\n\n  assert(this.k.length === W.length);\n  for (i = 0; i < W.length; i++) {\n    var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);\n    var T2 = sum32(s0_256(a), maj32(a, b, c));\n    h = g;\n    g = f;\n    f = e;\n    e = sum32(d, T1);\n    d = c;\n    c = b;\n    b = a;\n    a = sum32(T1, T2);\n  }\n\n  this.h[0] = sum32(this.h[0], a);\n  this.h[1] = sum32(this.h[1], b);\n  this.h[2] = sum32(this.h[2], c);\n  this.h[3] = sum32(this.h[3], d);\n  this.h[4] = sum32(this.h[4], e);\n  this.h[5] = sum32(this.h[5], f);\n  this.h[6] = sum32(this.h[6], g);\n  this.h[7] = sum32(this.h[7], h);\n};\n\nSHA256.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n","'use strict';\n\nvar utils = require('../utils');\nvar SHA256 = require('./256');\n\nfunction SHA224() {\n  if (!(this instanceof SHA224))\n    return new SHA224();\n\n  SHA256.call(this);\n  this.h = [\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,\n    0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4 ];\n}\nutils.inherits(SHA224, SHA256);\nmodule.exports = SHA224;\n\nSHA224.blockSize = 512;\nSHA224.outSize = 224;\nSHA224.hmacStrength = 192;\nSHA224.padLength = 64;\n\nSHA224.prototype._digest = function digest(enc) {\n  // Just truncate output\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 7), 'big');\n  else\n    return utils.split32(this.h.slice(0, 7), 'big');\n};\n\n","'use strict';\n\nvar utils = require('../utils');\nvar common = require('../common');\nvar assert = require('minimalistic-assert');\n\nvar rotr64_hi = utils.rotr64_hi;\nvar rotr64_lo = utils.rotr64_lo;\nvar shr64_hi = utils.shr64_hi;\nvar shr64_lo = utils.shr64_lo;\nvar sum64 = utils.sum64;\nvar sum64_hi = utils.sum64_hi;\nvar sum64_lo = utils.sum64_lo;\nvar sum64_4_hi = utils.sum64_4_hi;\nvar sum64_4_lo = utils.sum64_4_lo;\nvar sum64_5_hi = utils.sum64_5_hi;\nvar sum64_5_lo = utils.sum64_5_lo;\n\nvar BlockHash = common.BlockHash;\n\nvar sha512_K = [\n  0x428a2f98, 0xd728ae22, 0x71374491, 0x23ef65cd,\n  0xb5c0fbcf, 0xec4d3b2f, 0xe9b5dba5, 0x8189dbbc,\n  0x3956c25b, 0xf348b538, 0x59f111f1, 0xb605d019,\n  0x923f82a4, 0xaf194f9b, 0xab1c5ed5, 0xda6d8118,\n  0xd807aa98, 0xa3030242, 0x12835b01, 0x45706fbe,\n  0x243185be, 0x4ee4b28c, 0x550c7dc3, 0xd5ffb4e2,\n  0x72be5d74, 0xf27b896f, 0x80deb1fe, 0x3b1696b1,\n  0x9bdc06a7, 0x25c71235, 0xc19bf174, 0xcf692694,\n  0xe49b69c1, 0x9ef14ad2, 0xefbe4786, 0x384f25e3,\n  0x0fc19dc6, 0x8b8cd5b5, 0x240ca1cc, 0x77ac9c65,\n  0x2de92c6f, 0x592b0275, 0x4a7484aa, 0x6ea6e483,\n  0x5cb0a9dc, 0xbd41fbd4, 0x76f988da, 0x831153b5,\n  0x983e5152, 0xee66dfab, 0xa831c66d, 0x2db43210,\n  0xb00327c8, 0x98fb213f, 0xbf597fc7, 0xbeef0ee4,\n  0xc6e00bf3, 0x3da88fc2, 0xd5a79147, 0x930aa725,\n  0x06ca6351, 0xe003826f, 0x14292967, 0x0a0e6e70,\n  0x27b70a85, 0x46d22ffc, 0x2e1b2138, 0x5c26c926,\n  0x4d2c6dfc, 0x5ac42aed, 0x53380d13, 0x9d95b3df,\n  0x650a7354, 0x8baf63de, 0x766a0abb, 0x3c77b2a8,\n  0x81c2c92e, 0x47edaee6, 0x92722c85, 0x1482353b,\n  0xa2bfe8a1, 0x4cf10364, 0xa81a664b, 0xbc423001,\n  0xc24b8b70, 0xd0f89791, 0xc76c51a3, 0x0654be30,\n  0xd192e819, 0xd6ef5218, 0xd6990624, 0x5565a910,\n  0xf40e3585, 0x5771202a, 0x106aa070, 0x32bbd1b8,\n  0x19a4c116, 0xb8d2d0c8, 0x1e376c08, 0x5141ab53,\n  0x2748774c, 0xdf8eeb99, 0x34b0bcb5, 0xe19b48a8,\n  0x391c0cb3, 0xc5c95a63, 0x4ed8aa4a, 0xe3418acb,\n  0x5b9cca4f, 0x7763e373, 0x682e6ff3, 0xd6b2b8a3,\n  0x748f82ee, 0x5defb2fc, 0x78a5636f, 0x43172f60,\n  0x84c87814, 0xa1f0ab72, 0x8cc70208, 0x1a6439ec,\n  0x90befffa, 0x23631e28, 0xa4506ceb, 0xde82bde9,\n  0xbef9a3f7, 0xb2c67915, 0xc67178f2, 0xe372532b,\n  0xca273ece, 0xea26619c, 0xd186b8c7, 0x21c0c207,\n  0xeada7dd6, 0xcde0eb1e, 0xf57d4f7f, 0xee6ed178,\n  0x06f067aa, 0x72176fba, 0x0a637dc5, 0xa2c898a6,\n  0x113f9804, 0xbef90dae, 0x1b710b35, 0x131c471b,\n  0x28db77f5, 0x23047d84, 0x32caab7b, 0x40c72493,\n  0x3c9ebe0a, 0x15c9bebc, 0x431d67c4, 0x9c100d4c,\n  0x4cc5d4be, 0xcb3e42b6, 0x597f299c, 0xfc657e2a,\n  0x5fcb6fab, 0x3ad6faec, 0x6c44198c, 0x4a475817\n];\n\nfunction SHA512() {\n  if (!(this instanceof SHA512))\n    return new SHA512();\n\n  BlockHash.call(this);\n  this.h = [\n    0x6a09e667, 0xf3bcc908,\n    0xbb67ae85, 0x84caa73b,\n    0x3c6ef372, 0xfe94f82b,\n    0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1,\n    0x9b05688c, 0x2b3e6c1f,\n    0x1f83d9ab, 0xfb41bd6b,\n    0x5be0cd19, 0x137e2179 ];\n  this.k = sha512_K;\n  this.W = new Array(160);\n}\nutils.inherits(SHA512, BlockHash);\nmodule.exports = SHA512;\n\nSHA512.blockSize = 1024;\nSHA512.outSize = 512;\nSHA512.hmacStrength = 192;\nSHA512.padLength = 128;\n\nSHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {\n  var W = this.W;\n\n  // 32 x 32bit words\n  for (var i = 0; i < 32; i++)\n    W[i] = msg[start + i];\n  for (; i < W.length; i += 2) {\n    var c0_hi = g1_512_hi(W[i - 4], W[i - 3]);  // i - 2\n    var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);\n    var c1_hi = W[i - 14];  // i - 7\n    var c1_lo = W[i - 13];\n    var c2_hi = g0_512_hi(W[i - 30], W[i - 29]);  // i - 15\n    var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);\n    var c3_hi = W[i - 32];  // i - 16\n    var c3_lo = W[i - 31];\n\n    W[i] = sum64_4_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n    W[i + 1] = sum64_4_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo);\n  }\n};\n\nSHA512.prototype._update = function _update(msg, start) {\n  this._prepareBlock(msg, start);\n\n  var W = this.W;\n\n  var ah = this.h[0];\n  var al = this.h[1];\n  var bh = this.h[2];\n  var bl = this.h[3];\n  var ch = this.h[4];\n  var cl = this.h[5];\n  var dh = this.h[6];\n  var dl = this.h[7];\n  var eh = this.h[8];\n  var el = this.h[9];\n  var fh = this.h[10];\n  var fl = this.h[11];\n  var gh = this.h[12];\n  var gl = this.h[13];\n  var hh = this.h[14];\n  var hl = this.h[15];\n\n  assert(this.k.length === W.length);\n  for (var i = 0; i < W.length; i += 2) {\n    var c0_hi = hh;\n    var c0_lo = hl;\n    var c1_hi = s1_512_hi(eh, el);\n    var c1_lo = s1_512_lo(eh, el);\n    var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);\n    var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);\n    var c3_hi = this.k[i];\n    var c3_lo = this.k[i + 1];\n    var c4_hi = W[i];\n    var c4_lo = W[i + 1];\n\n    var T1_hi = sum64_5_hi(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n    var T1_lo = sum64_5_lo(\n      c0_hi, c0_lo,\n      c1_hi, c1_lo,\n      c2_hi, c2_lo,\n      c3_hi, c3_lo,\n      c4_hi, c4_lo);\n\n    c0_hi = s0_512_hi(ah, al);\n    c0_lo = s0_512_lo(ah, al);\n    c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);\n    c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);\n\n    var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);\n    var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);\n\n    hh = gh;\n    hl = gl;\n\n    gh = fh;\n    gl = fl;\n\n    fh = eh;\n    fl = el;\n\n    eh = sum64_hi(dh, dl, T1_hi, T1_lo);\n    el = sum64_lo(dl, dl, T1_hi, T1_lo);\n\n    dh = ch;\n    dl = cl;\n\n    ch = bh;\n    cl = bl;\n\n    bh = ah;\n    bl = al;\n\n    ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);\n    al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);\n  }\n\n  sum64(this.h, 0, ah, al);\n  sum64(this.h, 2, bh, bl);\n  sum64(this.h, 4, ch, cl);\n  sum64(this.h, 6, dh, dl);\n  sum64(this.h, 8, eh, el);\n  sum64(this.h, 10, fh, fl);\n  sum64(this.h, 12, gh, gl);\n  sum64(this.h, 14, hh, hl);\n};\n\nSHA512.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'big');\n  else\n    return utils.split32(this.h, 'big');\n};\n\nfunction ch64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ ((~xh) & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction ch64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ ((~xl) & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_hi(xh, xl, yh, yl, zh) {\n  var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction maj64_lo(xh, xl, yh, yl, zh, zl) {\n  var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 28);\n  var c1_hi = rotr64_hi(xl, xh, 2);  // 34\n  var c2_hi = rotr64_hi(xl, xh, 7);  // 39\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 28);\n  var c1_lo = rotr64_lo(xl, xh, 2);  // 34\n  var c2_lo = rotr64_lo(xl, xh, 7);  // 39\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 14);\n  var c1_hi = rotr64_hi(xh, xl, 18);\n  var c2_hi = rotr64_hi(xl, xh, 9);  // 41\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction s1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 14);\n  var c1_lo = rotr64_lo(xh, xl, 18);\n  var c2_lo = rotr64_lo(xl, xh, 9);  // 41\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 1);\n  var c1_hi = rotr64_hi(xh, xl, 8);\n  var c2_hi = shr64_hi(xh, xl, 7);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g0_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 1);\n  var c1_lo = rotr64_lo(xh, xl, 8);\n  var c2_lo = shr64_lo(xh, xl, 7);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_hi(xh, xl) {\n  var c0_hi = rotr64_hi(xh, xl, 19);\n  var c1_hi = rotr64_hi(xl, xh, 29);  // 61\n  var c2_hi = shr64_hi(xh, xl, 6);\n\n  var r = c0_hi ^ c1_hi ^ c2_hi;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n\nfunction g1_512_lo(xh, xl) {\n  var c0_lo = rotr64_lo(xh, xl, 19);\n  var c1_lo = rotr64_lo(xl, xh, 29);  // 61\n  var c2_lo = shr64_lo(xh, xl, 6);\n\n  var r = c0_lo ^ c1_lo ^ c2_lo;\n  if (r < 0)\n    r += 0x100000000;\n  return r;\n}\n","'use strict';\n\nvar utils = require('../utils');\n\nvar SHA512 = require('./512');\n\nfunction SHA384() {\n  if (!(this instanceof SHA384))\n    return new SHA384();\n\n  SHA512.call(this);\n  this.h = [\n    0xcbbb9d5d, 0xc1059ed8,\n    0x629a292a, 0x367cd507,\n    0x9159015a, 0x3070dd17,\n    0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31,\n    0x8eb44a87, 0x68581511,\n    0xdb0c2e0d, 0x64f98fa7,\n    0x47b5481d, 0xbefa4fa4 ];\n}\nutils.inherits(SHA384, SHA512);\nmodule.exports = SHA384;\n\nSHA384.blockSize = 1024;\nSHA384.outSize = 384;\nSHA384.hmacStrength = 192;\nSHA384.padLength = 128;\n\nSHA384.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h.slice(0, 12), 'big');\n  else\n    return utils.split32(this.h.slice(0, 12), 'big');\n};\n","'use strict';\n\nexports.sha1 = require('./sha/1');\nexports.sha224 = require('./sha/224');\nexports.sha256 = require('./sha/256');\nexports.sha384 = require('./sha/384');\nexports.sha512 = require('./sha/512');\n","'use strict';\n\nvar utils = require('./utils');\nvar common = require('./common');\n\nvar rotl32 = utils.rotl32;\nvar sum32 = utils.sum32;\nvar sum32_3 = utils.sum32_3;\nvar sum32_4 = utils.sum32_4;\nvar BlockHash = common.BlockHash;\n\nfunction RIPEMD160() {\n  if (!(this instanceof RIPEMD160))\n    return new RIPEMD160();\n\n  BlockHash.call(this);\n\n  this.h = [ 0x67452301, 0xefcdab89, 0x98badcfe, 0x10325476, 0xc3d2e1f0 ];\n  this.endian = 'little';\n}\nutils.inherits(RIPEMD160, BlockHash);\nexports.ripemd160 = RIPEMD160;\n\nRIPEMD160.blockSize = 512;\nRIPEMD160.outSize = 160;\nRIPEMD160.hmacStrength = 192;\nRIPEMD160.padLength = 64;\n\nRIPEMD160.prototype._update = function update(msg, start) {\n  var A = this.h[0];\n  var B = this.h[1];\n  var C = this.h[2];\n  var D = this.h[3];\n  var E = this.h[4];\n  var Ah = A;\n  var Bh = B;\n  var Ch = C;\n  var Dh = D;\n  var Eh = E;\n  for (var j = 0; j < 80; j++) {\n    var T = sum32(\n      rotl32(\n        sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)),\n        s[j]),\n      E);\n    A = E;\n    E = D;\n    D = rotl32(C, 10);\n    C = B;\n    B = T;\n    T = sum32(\n      rotl32(\n        sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)),\n        sh[j]),\n      Eh);\n    Ah = Eh;\n    Eh = Dh;\n    Dh = rotl32(Ch, 10);\n    Ch = Bh;\n    Bh = T;\n  }\n  T = sum32_3(this.h[1], C, Dh);\n  this.h[1] = sum32_3(this.h[2], D, Eh);\n  this.h[2] = sum32_3(this.h[3], E, Ah);\n  this.h[3] = sum32_3(this.h[4], A, Bh);\n  this.h[4] = sum32_3(this.h[0], B, Ch);\n  this.h[0] = T;\n};\n\nRIPEMD160.prototype._digest = function digest(enc) {\n  if (enc === 'hex')\n    return utils.toHex32(this.h, 'little');\n  else\n    return utils.split32(this.h, 'little');\n};\n\nfunction f(j, x, y, z) {\n  if (j <= 15)\n    return x ^ y ^ z;\n  else if (j <= 31)\n    return (x & y) | ((~x) & z);\n  else if (j <= 47)\n    return (x | (~y)) ^ z;\n  else if (j <= 63)\n    return (x & z) | (y & (~z));\n  else\n    return x ^ (y | (~z));\n}\n\nfunction K(j) {\n  if (j <= 15)\n    return 0x00000000;\n  else if (j <= 31)\n    return 0x5a827999;\n  else if (j <= 47)\n    return 0x6ed9eba1;\n  else if (j <= 63)\n    return 0x8f1bbcdc;\n  else\n    return 0xa953fd4e;\n}\n\nfunction Kh(j) {\n  if (j <= 15)\n    return 0x50a28be6;\n  else if (j <= 31)\n    return 0x5c4dd124;\n  else if (j <= 47)\n    return 0x6d703ef3;\n  else if (j <= 63)\n    return 0x7a6d76e9;\n  else\n    return 0x00000000;\n}\n\nvar r = [\n  0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\n  7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,\n  3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12,\n  1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,\n  4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13\n];\n\nvar rh = [\n  5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12,\n  6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,\n  15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13,\n  8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,\n  12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11\n];\n\nvar s = [\n  11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8,\n  7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13, 12,\n  11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5,\n  11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6, 5, 12,\n  9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6\n];\n\nvar sh = [\n  8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6,\n  9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13, 11,\n  9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5,\n  15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5, 15, 8,\n  8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11\n];\n","'use strict';\n\nvar utils = require('./utils');\nvar assert = require('minimalistic-assert');\n\nfunction Hmac(hash, key, enc) {\n  if (!(this instanceof Hmac))\n    return new Hmac(hash, key, enc);\n  this.Hash = hash;\n  this.blockSize = hash.blockSize / 8;\n  this.outSize = hash.outSize / 8;\n  this.inner = null;\n  this.outer = null;\n\n  this._init(utils.toArray(key, enc));\n}\nmodule.exports = Hmac;\n\nHmac.prototype._init = function init(key) {\n  // Shorten key, if needed\n  if (key.length > this.blockSize)\n    key = new this.Hash().update(key).digest();\n  assert(key.length <= this.blockSize);\n\n  // Add padding to key\n  for (var i = key.length; i < this.blockSize; i++)\n    key.push(0);\n\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x36;\n  this.inner = new this.Hash().update(key);\n\n  // 0x36 ^ 0x5c = 0x6a\n  for (i = 0; i < key.length; i++)\n    key[i] ^= 0x6a;\n  this.outer = new this.Hash().update(key);\n};\n\nHmac.prototype.update = function update(msg, enc) {\n  this.inner.update(msg, enc);\n  return this;\n};\n\nHmac.prototype.digest = function digest(enc) {\n  this.outer.update(this.inner.digest());\n  return this.outer.digest(enc);\n};\n","var hash = exports;\n\nhash.utils = require('./hash/utils');\nhash.common = require('./hash/common');\nhash.sha = require('./hash/sha');\nhash.ripemd = require('./hash/ripemd');\nhash.hmac = require('./hash/hmac');\n\n// Proxy hash functions to the main object\nhash.sha1 = hash.sha.sha1;\nhash.sha256 = hash.sha.sha256;\nhash.sha224 = hash.sha.sha224;\nhash.sha384 = hash.sha.sha384;\nhash.sha512 = hash.sha.sha512;\nhash.ripemd160 = hash.ripemd.ripemd160;\n","export const version = \"logger/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n//# sourceMappingURL=index.js.map","export const version = \"bytes/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n///////////////////////////////\nfunction isHexable(value) {\n    return !!(value.toHexString);\n}\nfunction addSlice(array) {\n    if (array.slice) {\n        return array;\n    }\n    array.slice = function () {\n        const args = Array.prototype.slice.call(arguments);\n        return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));\n    };\n    return array;\n}\nexport function isBytesLike(value) {\n    return ((isHexString(value) && !(value.length % 2)) || isBytes(value));\n}\nfunction isInteger(value) {\n    return (typeof (value) === \"number\" && value == value && (value % 1) === 0);\n}\nexport function isBytes(value) {\n    if (value == null) {\n        return false;\n    }\n    if (value.constructor === Uint8Array) {\n        return true;\n    }\n    if (typeof (value) === \"string\") {\n        return false;\n    }\n    if (!isInteger(value.length) || value.length < 0) {\n        return false;\n    }\n    for (let i = 0; i < value.length; i++) {\n        const v = value[i];\n        if (!isInteger(v) || v < 0 || v >= 256) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function arrayify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid arrayify value\");\n        const result = [];\n        while (value) {\n            result.unshift(value & 0xff);\n            value = parseInt(String(value / 256));\n        }\n        if (result.length === 0) {\n            result.push(0);\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        value = value.toHexString();\n    }\n    if (isHexString(value)) {\n        let hex = value.substring(2);\n        if (hex.length % 2) {\n            if (options.hexPad === \"left\") {\n                hex = \"0x0\" + hex.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                hex += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        const result = [];\n        for (let i = 0; i < hex.length; i += 2) {\n            result.push(parseInt(hex.substring(i, i + 2), 16));\n        }\n        return addSlice(new Uint8Array(result));\n    }\n    if (isBytes(value)) {\n        return addSlice(new Uint8Array(value));\n    }\n    return logger.throwArgumentError(\"invalid arrayify value\", \"value\", value);\n}\nexport function concat(items) {\n    const objects = items.map(item => arrayify(item));\n    const length = objects.reduce((accum, item) => (accum + item.length), 0);\n    const result = new Uint8Array(length);\n    objects.reduce((offset, object) => {\n        result.set(object, offset);\n        return offset + object.length;\n    }, 0);\n    return addSlice(result);\n}\nexport function stripZeros(value) {\n    let result = arrayify(value);\n    if (result.length === 0) {\n        return result;\n    }\n    // Find the first non-zero entry\n    let start = 0;\n    while (start < result.length && result[start] === 0) {\n        start++;\n    }\n    // If we started with zeros, strip them\n    if (start) {\n        result = result.slice(start);\n    }\n    return result;\n}\nexport function zeroPad(value, length) {\n    value = arrayify(value);\n    if (value.length > length) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[0]);\n    }\n    const result = new Uint8Array(length);\n    result.set(value, length - value.length);\n    return addSlice(result);\n}\nexport function isHexString(value, length) {\n    if (typeof (value) !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) {\n        return false;\n    }\n    if (length && value.length !== 2 + 2 * length) {\n        return false;\n    }\n    return true;\n}\nconst HexCharacters = \"0123456789abcdef\";\nexport function hexlify(value, options) {\n    if (!options) {\n        options = {};\n    }\n    if (typeof (value) === \"number\") {\n        logger.checkSafeUint53(value, \"invalid hexlify value\");\n        let hex = \"\";\n        while (value) {\n            hex = HexCharacters[value & 0xf] + hex;\n            value = Math.floor(value / 16);\n        }\n        if (hex.length) {\n            if (hex.length % 2) {\n                hex = \"0\" + hex;\n            }\n            return \"0x\" + hex;\n        }\n        return \"0x00\";\n    }\n    if (typeof (value) === \"bigint\") {\n        value = value.toString(16);\n        if (value.length % 2) {\n            return (\"0x0\" + value);\n        }\n        return \"0x\" + value;\n    }\n    if (options.allowMissingPrefix && typeof (value) === \"string\" && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    if (isHexable(value)) {\n        return value.toHexString();\n    }\n    if (isHexString(value)) {\n        if (value.length % 2) {\n            if (options.hexPad === \"left\") {\n                value = \"0x0\" + value.substring(2);\n            }\n            else if (options.hexPad === \"right\") {\n                value += \"0\";\n            }\n            else {\n                logger.throwArgumentError(\"hex data is odd-length\", \"value\", value);\n            }\n        }\n        return value.toLowerCase();\n    }\n    if (isBytes(value)) {\n        let result = \"0x\";\n        for (let i = 0; i < value.length; i++) {\n            let v = value[i];\n            result += HexCharacters[(v & 0xf0) >> 4] + HexCharacters[v & 0x0f];\n        }\n        return result;\n    }\n    return logger.throwArgumentError(\"invalid hexlify value\", \"value\", value);\n}\n/*\nfunction unoddify(value: BytesLike | Hexable | number): BytesLike | Hexable | number {\n    if (typeof(value) === \"string\" && value.length % 2 && value.substring(0, 2) === \"0x\") {\n        return \"0x0\" + value.substring(2);\n    }\n    return value;\n}\n*/\nexport function hexDataLength(data) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        return null;\n    }\n    return (data.length - 2) / 2;\n}\nexport function hexDataSlice(data, offset, endOffset) {\n    if (typeof (data) !== \"string\") {\n        data = hexlify(data);\n    }\n    else if (!isHexString(data) || (data.length % 2)) {\n        logger.throwArgumentError(\"invalid hexData\", \"value\", data);\n    }\n    offset = 2 + 2 * offset;\n    if (endOffset != null) {\n        return \"0x\" + data.substring(offset, 2 + 2 * endOffset);\n    }\n    return \"0x\" + data.substring(offset);\n}\nexport function hexConcat(items) {\n    let result = \"0x\";\n    items.forEach((item) => {\n        result += hexlify(item).substring(2);\n    });\n    return result;\n}\nexport function hexValue(value) {\n    const trimmed = hexStripZeros(hexlify(value, { hexPad: \"left\" }));\n    if (trimmed === \"0x\") {\n        return \"0x0\";\n    }\n    return trimmed;\n}\nexport function hexStripZeros(value) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    value = value.substring(2);\n    let offset = 0;\n    while (offset < value.length && value[offset] === \"0\") {\n        offset++;\n    }\n    return \"0x\" + value.substring(offset);\n}\nexport function hexZeroPad(value, length) {\n    if (typeof (value) !== \"string\") {\n        value = hexlify(value);\n    }\n    else if (!isHexString(value)) {\n        logger.throwArgumentError(\"invalid hex string\", \"value\", value);\n    }\n    if (value.length > 2 * length + 2) {\n        logger.throwArgumentError(\"value out of range\", \"value\", arguments[1]);\n    }\n    while (value.length < 2 * length + 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    return value;\n}\nexport function splitSignature(signature) {\n    const result = {\n        r: \"0x\",\n        s: \"0x\",\n        _vs: \"0x\",\n        recoveryParam: 0,\n        v: 0\n    };\n    if (isBytesLike(signature)) {\n        const bytes = arrayify(signature);\n        if (bytes.length !== 65) {\n            logger.throwArgumentError(\"invalid signature string; must be 65 bytes\", \"signature\", signature);\n        }\n        // Get the r, s and v\n        result.r = hexlify(bytes.slice(0, 32));\n        result.s = hexlify(bytes.slice(32, 64));\n        result.v = bytes[64];\n        // Allow a recid to be used as the v\n        if (result.v < 27) {\n            if (result.v === 0 || result.v === 1) {\n                result.v += 27;\n            }\n            else {\n                logger.throwArgumentError(\"signature invalid v byte\", \"signature\", signature);\n            }\n        }\n        // Compute recoveryParam from v\n        result.recoveryParam = 1 - (result.v % 2);\n        // Compute _vs from recoveryParam and s\n        if (result.recoveryParam) {\n            bytes[32] |= 0x80;\n        }\n        result._vs = hexlify(bytes.slice(32, 64));\n    }\n    else {\n        result.r = signature.r;\n        result.s = signature.s;\n        result.v = signature.v;\n        result.recoveryParam = signature.recoveryParam;\n        result._vs = signature._vs;\n        // If the _vs is available, use it to populate missing s, v and recoveryParam\n        // and verify non-missing s, v and recoveryParam\n        if (result._vs != null) {\n            const vs = zeroPad(arrayify(result._vs), 32);\n            result._vs = hexlify(vs);\n            // Set or check the recid\n            const recoveryParam = ((vs[0] >= 128) ? 1 : 0);\n            if (result.recoveryParam == null) {\n                result.recoveryParam = recoveryParam;\n            }\n            else if (result.recoveryParam !== recoveryParam) {\n                logger.throwArgumentError(\"signature recoveryParam mismatch _vs\", \"signature\", signature);\n            }\n            // Set or check the s\n            vs[0] &= 0x7f;\n            const s = hexlify(vs);\n            if (result.s == null) {\n                result.s = s;\n            }\n            else if (result.s !== s) {\n                logger.throwArgumentError(\"signature v mismatch _vs\", \"signature\", signature);\n            }\n        }\n        // Use recid and v to populate each other\n        if (result.recoveryParam == null) {\n            if (result.v == null) {\n                logger.throwArgumentError(\"signature missing v and recoveryParam\", \"signature\", signature);\n            }\n            else if (result.v === 0 || result.v === 1) {\n                result.recoveryParam = result.v;\n            }\n            else {\n                result.recoveryParam = 1 - (result.v % 2);\n            }\n        }\n        else {\n            if (result.v == null) {\n                result.v = 27 + result.recoveryParam;\n            }\n            else {\n                const recId = (result.v === 0 || result.v === 1) ? result.v : (1 - (result.v % 2));\n                if (result.recoveryParam !== recId) {\n                    logger.throwArgumentError(\"signature recoveryParam mismatch v\", \"signature\", signature);\n                }\n            }\n        }\n        if (result.r == null || !isHexString(result.r)) {\n            logger.throwArgumentError(\"signature missing or invalid r\", \"signature\", signature);\n        }\n        else {\n            result.r = hexZeroPad(result.r, 32);\n        }\n        if (result.s == null || !isHexString(result.s)) {\n            logger.throwArgumentError(\"signature missing or invalid s\", \"signature\", signature);\n        }\n        else {\n            result.s = hexZeroPad(result.s, 32);\n        }\n        const vs = arrayify(result.s);\n        if (vs[0] >= 128) {\n            logger.throwArgumentError(\"signature s out of range\", \"signature\", signature);\n        }\n        if (result.recoveryParam) {\n            vs[0] |= 0x80;\n        }\n        const _vs = hexlify(vs);\n        if (result._vs) {\n            if (!isHexString(result._vs)) {\n                logger.throwArgumentError(\"signature invalid _vs\", \"signature\", signature);\n            }\n            result._vs = hexZeroPad(result._vs, 32);\n        }\n        // Set or check the _vs\n        if (result._vs == null) {\n            result._vs = _vs;\n        }\n        else if (result._vs !== _vs) {\n            logger.throwArgumentError(\"signature _vs mismatch v and s\", \"signature\", signature);\n        }\n    }\n    return result;\n}\nexport function joinSignature(signature) {\n    signature = splitSignature(signature);\n    return hexlify(concat([\n        signature.r,\n        signature.s,\n        (signature.recoveryParam ? \"0x1c\" : \"0x1b\")\n    ]));\n}\n//# sourceMappingURL=index.js.map","export const version = \"sha2/5.5.0\";\n//# sourceMappingURL=_version.js.map","\"use strict\";\nimport hash from \"hash.js\";\n//const _ripemd160 = _hash.ripemd160;\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { SupportedAlgorithm } from \"./types\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport function ripemd160(data) {\n    return \"0x\" + (hash.ripemd160().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha256(data) {\n    return \"0x\" + (hash.sha256().update(arrayify(data)).digest(\"hex\"));\n}\nexport function sha512(data) {\n    return \"0x\" + (hash.sha512().update(arrayify(data)).digest(\"hex\"));\n}\nexport function computeHmac(algorithm, key, data) {\n    if (!SupportedAlgorithm[algorithm]) {\n        logger.throwError(\"unsupported algorithm \" + algorithm, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"hmac\",\n            algorithm: algorithm\n        });\n    }\n    return \"0x\" + hash.hmac(hash[algorithm], arrayify(key)).update(arrayify(data)).digest(\"hex\");\n}\n//# sourceMappingURL=sha2.js.map","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from '@ethersproject/sha2';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = sha256(new Uint8Array(buffer)).slice(2);\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = sha256(new Uint8Array(buffer)).slice(2);\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\nexport type TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const pubkeySorting = x.pubkey\n        .toBase58()\n        .localeCompare(y.pubkey.toBase58());\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? pubkeySorting : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","import http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: ReturnType<typeof setTimeout> | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    if (this._destroyTimeout !== null) {\n      clearTimeout(this._destroyTimeout);\n      this._destroyTimeout = null;\n    }\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch from 'cross-fetch';\nimport type {Response} from 'cross-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: SimulatedTransactionAccountInfo[] | null;\n  unitsConsumed?: number;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          pick({\n            executable: boolean(),\n            owner: string(),\n            lamports: number(),\n            data: array(string()),\n            rentEpoch: optional(number()),\n          }),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware:\n    | ((url: string, options: any) => Promise<Response>)\n    | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (url: string, options: any) => {\n      const modifiedFetchArgs = await new Promise<[string, any]>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(url, options, (modifiedUrl, modifiedOptions) =>\n              resolve([modifiedUrl, modifiedOptions]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: (modifiedUrl: string, modifiedOptions: any) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    configOrCommitment?: GetMultipleAccountsConfig | Commitment,\n  ): Promise<(AccountInfo<Buffer | ParsedAccountData> | null)[]> {\n    const keys = publicKeys.map(key => key.toBase58());\n\n    let commitment;\n    let encoding: 'base64' | 'jsonParsed' = 'base64';\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n        encoding = 'base64';\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding || 'base64';\n      }\n    }\n\n    const args = this._buildArgs([keys], commitment, encoding);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info for accounts ' + keys + ': ' + res.error.message,\n      );\n    }\n    return res.result.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get genesis hash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new Error('failed to get blocks: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      transaction = transactionOrMessage;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n    }\n\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        if (err instanceof Error) {\n          console.error(\n            `${rpcMethod} error for argument`,\n            rpcArgs,\n            err.message,\n          );\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        if (err instanceof Error) {\n          console.error(`${rpcMethod} error:`, err.message);\n        }\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport nacl from 'tweetnacl';\n\nimport {Keypair} from './keypair';\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        publicKeyOffset,\n        publicKeyInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = nacl.sign.detached(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw'\n  | 'Merge';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport sha3 from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(\n        sha3.keccak_256.update(toBuffer(publicKey)).digest(),\n      ).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        sha3.keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\nexport type AuthorizedVoter = {\n  epoch: number;\n  authorizedVoter: PublicKey;\n};\n\nexport type PriorVoter = {\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n};\n\nexport type BlockTimestamp = {\n  slot: number;\n  timetamp: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({epoch, authorizedVoter}: AuthorizedVoter) {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoter) {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({\n  buf,\n  idx,\n  isEmpty,\n}: {\n  buf: PriorVoter[];\n  idx: number;\n  isEmpty: boolean;\n}): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [...buf.slice(idx + 1).map(parsePriorVoters), ...buf.slice(0, idx)];\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './ed25519-program';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './errors';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","isBuffer","Uint8Array","from","buffer","byteOffset","byteLength","assert","inherits_browserModule","inheritsModule","require$$0","require$$1","rotr32","rotl32","sum32","sum32_3","sum32_4","sum32_5","sum64","sum64_hi","sum64_lo","sum64_4_hi","sum64_4_lo","sum64_5_hi","sum64_5_lo","rotr64_hi","rotr64_lo","shr64_hi","shr64_lo","utils","BlockHash","ft_1","ch32","maj32","s0_256","s1_256","g0_256","g1_256","common","shaCommon","require$$2","require$$3","SHA256","SHA512","require$$4","version","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","isPublicKeyData","value","_bn","undefined","PublicKey","decoded","bs58","BN","equals","publicKey","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","slice","createProgramAddress","seeds","forEach","TypeError","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","isOnCurve","pubkey","default","set","kind","fields","naclLowLevel","nacl","lowlevel","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","str","chars","span","authorized","lockup","ns64","getAlloc","type","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","recentBlockhash","instructions","indexToProgramIds","account","ix","programIdIndex","isAccountSigner","index","numRequiredSignatures","isAccountWritable","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","isProgramId","has","programIds","values","nonProgramIds","filter","_","numKeys","keyCount","shortvec","instruction","accounts","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","u8","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","condition","message","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Transaction","signature","signatures","feePayer","nonceInfo","add","items","compileMessage","nonceInstruction","unshift","console","warn","accountMetas","accountMeta","includes","isSigner","isWritable","sort","x","y","pubkeySorting","localeCompare","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","connection","options","sendOptions","skipPreflight","preflightCommitment","commitment","sendTransaction","status","confirmTransaction","JSON","stringify","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","entries","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","params","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","payer","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","keepAlive","maxSockets","https","Agent","http","_agent","_activeRequests","_destroyTimeout","_useHttps","requestStart","clearTimeout","requestEnd","destroy","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","makeWebsocketUrl","endpoint","url","URL","protocol","host","port","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","createRpcResult","union","pick","jsonrpc","id","code","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","createRpcClient","httpHeaders","fetchMiddleware","disableRetryOnRateLimit","agentManager","fetchWithMiddleware","modifiedFetchArgs","reject","modifiedUrl","modifiedOptions","fetch","clientBrowser","RpcClient","request","callback","agent","method","body","headers","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","response","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","isArray","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","Connection","commitmentOrConfig","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","lastFetch","transactionSignatures","simulatedSignatures","_accountChangeSubscriptionCounter","_accountChangeSubscriptions","_programAccountChangeSubscriptionCounter","_programAccountChangeSubscriptions","_rootSubscriptionCounter","_rootSubscriptions","_signatureSubscriptionCounter","_signatureSubscriptions","_slotSubscriptionCounter","_slotSubscriptions","_logsSubscriptionCounter","_logsSubscriptions","_slotUpdateSubscriptionCounter","_slotUpdateSubscriptions","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleAccountsInfo","publicKeys","configOrCommitment","encoding","getStakeActivation","getProgramAccounts","extra","filters","getParsedProgramAccounts","decodedSignature","start","Date","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","getFeeForMessage","wireMessage","getRecentBlockhash","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getTransaction","getConfirmedBlock","getBlocks","endSlot","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","block","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","info","getSignaturesForAddress","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","transactionOrMessage","includeAccounts","encodedTransaction","sigVerify","traceIndent","logTrace","join","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","s","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","close","connect","mentions","notification","onAccountChange","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","override","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","generate","skipValidation","encoder","TextEncoder","fromSeed","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","split","merge","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","sha3","keccak_256","update","digest","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","startsWith","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","authorizedWithdrawer","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","authorizedVoter","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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E,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACtD,CAAC,CAAC;AACF;AACA,IAAI,EAAE,GAAG;AACT,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACtD,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACtD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACtD,CAAC,CAAC;AACF;AACA,IAAI,CAAC,GAAG;AACR,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACxD,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE;AACxD,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC;AACxD,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE;AACxD,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC;AACxD,CAAC,CAAC;AACF;AACA,IAAI,EAAE,GAAG;AACT,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC;AACxD,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;AACxD,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE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"}