"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.test = void 0;
const web3_js_1 = require("@solana/web3.js");
const state_1 = require("./state");
const utils_1 = require("./utils");
const ENDPOINT = 'https://devnet.solana.com/';
// const ENDPOINT = 'https://solana-api.projectserum.com/';
async function test() {
    const connection = new web3_js_1.Connection(ENDPOINT);
    // let secretKey = JSON.parse(
    //   (await readFile('/home/lcchy-work/.config/solana/id_devnet.json')).toString()
    // );
    // let adminAccount = new Keypair(secretKey);
    const root_name = '.sol';
    // let create_instruction = await createNameRegistry(
    //   connection,
    //   root_name,
    //   1000,
    //   adminAccount.publicKey,
    //   adminAccount.publicKey,
    // );
    // console.log(
    //   await signAndSendTransactionInstructions(
    //     connection,
    //     [adminAccount],
    //     adminAccount,
    //     [create_instruction]
    //   )
    // );
    // let input_data = Buffer.from("Du");
    // let updateInstruction = await updateNameRegistryData(
    //   connection,
    //   root_name,
    //   0,
    //   input_data,
    // );
    // console.log(
    //   await signAndSendTransactionInstructions(
    //     connection,
    //     [adminAccount],
    //     adminAccount,
    //     [updateInstruction]
    //   )
    // );
    // let transferInstruction = await transferNameOwnership(
    //   connection,
    //   root_name,
    //   adminAccount.publicKey,
    //   adminAccount.publicKey,
    // );
    // console.log(
    //   await signAndSendTransactionInstructions(
    //     connection,
    //     [adminAccount],
    //     adminAccount,
    //     [transferInstruction]
    //   )
    // );
    // let deleteInstruction = await deleteNameRegistry(
    //   connection,
    //   root_name,
    //   adminAccount.publicKey
    // );
    // console.log(
    //   await signAndSendTransactionInstructions(
    //     connection,
    //     [adminAccount],
    //     adminAccount,
    //     [deleteInstruction]
    //   )
    // );
    const hashed_root_name = await utils_1.getHashedName(root_name);
    const nameAccountKey = await utils_1.getNameAccountKey(hashed_root_name);
    console.log(await state_1.NameRegistryState.retrieve(connection, nameAccountKey));
}
exports.test = test;
test();
//# sourceMappingURL=test.js.map